name: Build and Release Deceptgold

on:
  push:
    branches:
      - master
  pull_request:
    types:
      - opened
      - synchronize
      - labeled

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  dependabot-check:
    name: 🛠️ Dependency Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install dependencies
        working-directory: deceptgold
        run: |
          poetry config virtualenvs.in-project true
          poetry install
      - name: Check for vulnerabilities with Safety
        working-directory: deceptgold
        run: |
          poetry run pip install safety
          poetry run safety check --full-report
      - name: Run tests
        working-directory: deceptgold
        run: |
          poetry run pytest -vvv

  codeql-analysis:
    name: 🔍 Security Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-and-quality
      - name: Autobuild (for compiled languages, not needed for Python)
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: codeql-results
        continue-on-error: true
      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: codeql-results
          category: codeql-python-security

  run-tests:
    name: ✅ Run tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    needs: [codeql-analysis]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Fetch all history and tags
        run: |
          git fetch --prune --tags origin +refs/heads/master:refs/remotes/origin/master
          git checkout master
          git pull origin master || echo "No updates to pull"
          echo "Current branch: $(git branch --show-current)"
          echo "Commit at HEAD: $(git log -1 --oneline)"
          echo "Repository status:"
          git status
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install dependencies
        working-directory: deceptgold
        run: |
          poetry config virtualenvs.in-project true
          poetry install
      - name: Run tests
        working-directory: deceptgold
        run: |
          poetry run pytest -vvv

  generate-changelog:
    name: ✅ Generate Changelog
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: [ codeql-analysis ]
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Fetch all history and tags
        run: |
          git fetch --prune --tags origin +refs/heads/master:refs/remotes/origin/master
          git checkout master
          git pull origin master || echo "No updates to pull"
          echo "Current branch: $(git branch --show-current)"
          echo "Commit at HEAD: $(git log -1 --oneline)"
          echo "Repository status:"
          git status
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install dependencies
        working-directory: deceptgold
        run: |
          poetry config virtualenvs.in-project true
          poetry install
      - name: Install git-cliff
        run: |
          curl -L https://github.com/orhun/git-cliff/releases/download/v2.8.0/git-cliff-2.8.0-x86_64-unknown-linux-musl.tar.gz -o git-cliff-2.8.0-x86_64-unknown-linux-musl.tar.gz
          tar -xzf git-cliff-2.8.0-x86_64-unknown-linux-musl.tar.gz
          sudo mv git-cliff-2.8.0/git-cliff /usr/local/bin/
          git-cliff --version
      - name: Generate CHANGELOG
        working-directory: deceptgold
        run: |
          poetry run generate-changelog
          if ! grep -q "## " src/deceptgold/CHANGELOG; then
            echo "Error: CHANGELOG is empty or missing version sections."
            exit 1
          fi
          echo "Git status after generating CHANGELOG:"
          git status
      - name: Commit and create Pull Request for CHANGELOG
        id: create-pull-request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Automatic update of CHANGELOG [skip ci]"
          branch: auto-changelog-${{ github.run_id }}
          delete-branch: true
          title: "Update CHANGELOG"
          body: |
            This PR updates the CHANGELOG automatically.
            Please review and merge.
          labels: changelog, automated
          assignees: ${{ github.actor }}
          reviewers: ${{ github.actor }}
          add-paths: src/deceptgold/CHANGELOG
      - name: Enable auto-merge for PR
        if: steps.create-pull-request.outputs.pull-request-number != ''
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.create-pull-request.outputs.pull-request-number }}
          merge-method: merge

  generate-docs:
    name: 📚 Generate Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: [codeql-analysis, run-tests]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install documentation dependencies
        working-directory: deceptgold
        run: |
          poetry config virtualenvs.in-project true
          poetry install --only docs
      - name: Build documentation
        working-directory: deceptgold
        run: |
          poetry run generate-doc --build-only
          echo "NOTICE: The documentation is internal. Run 'poetry run generate-doc' locally to view it at http://localhost:8000."

  build-linux:
    name: 🐧 Build for Linux
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: [codeql-analysis, run-tests, generate-changelog]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y patchelf tree
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install project dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry install
        working-directory: deceptgold
      - name: Obfuscate source for Linux
        working-directory: deceptgold
        run: |
          rm -rf src_obf/ src/deceptgold.dist-info
          mkdir -p src_obf
          poetry run pyarmor gen -O src_obf -r -i src/deceptgold --platform linux.x86_64
          cp -r src/deceptgold/resources src_obf/deceptgold/
          cp -r src/deceptgold/CHANGELOG src_obf/deceptgold/
          cp -r src/deceptgold/LICENSE src_obf/deceptgold/
          cp -r src/deceptgold/NOTICE src_obf/deceptgold/
      - name: Build and package for Ubuntu
        working-directory: deceptgold
        run: |
          poetry run briefcase build --target ubuntu --update
          poetry run briefcase package --target ubuntu
      - name: Build and package for Fedora
        working-directory: deceptgold
        run: |
          poetry run briefcase build --target fedora --update
          poetry run briefcase package --target fedora:40
      - name: Build and package for Debian
        working-directory: deceptgold
        run: |
          poetry run briefcase build --target debian --update
          poetry run briefcase package --target debian
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: deceptgold/dist/*

  build-windows:
    name: 🪟 Build for Windows
    runs-on: windows-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: [codeql-analysis, run-tests, generate-changelog]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Poetry
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
          $poetryPath = "$env:APPDATA\Python\Scripts"
          echo "$poetryPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
        shell: pwsh
      - name: Install project dependencies
        working-directory: deceptgold
        run: |
          poetry config virtualenvs.in-project true
          poetry install
        shell: pwsh
      - name: Obfuscate source for Windows
        working-directory: deceptgold
        run: |
          Remove-Item -Recurse -Force src_obf, src\deceptgold.dist-info -ErrorAction SilentlyContinue
          mkdir src_obf
          poetry run pyarmor gen -O src_obf -r -i src/deceptgold --platform windows.x86_64
          cp -r src/deceptgold/resources src_obf/deceptgold/
          cp -r src/deceptgold/CHANGELOG src_obf/deceptgold/
          cp -r src/deceptgold/LICENSE src_obf/deceptgold/
          cp -r src/deceptgold/NOTICE src_obf/deceptgold/
        shell: pwsh
      - name: Build and package for Windows
        working-directory: deceptgold
        run: |
          poetry run briefcase build windows --update
          poetry run briefcase package windows
        shell: pwsh
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: deceptgold/dist/*

  scan-virustotal:
    name: 🔍 VirusTotal Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: [build-linux, build-windows, generate-changelog]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: deceptgold/dist
      - name: VirusTotal Scan
        run: bash deceptgold/utils/check_virustotal.sh
        env:
          VIRUSTOTAL_API_KEY: ${{ secrets.VIRUSTOTAL_API_KEY }}

  release:
    name: 🚀 Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: [build-linux, build-windows, scan-virustotal, generate-changelog]
    steps:
      - name: Checkout repository [verified]
        uses: actions/checkout@v3
      - name: Download Linux artifacts [verified]
        uses: actions/download-artifact@v4
        with:
          name: linux-artifacts
          path: deceptgold/dist
      - name: Download Windows artifacts [verified]
        uses: actions/download-artifact@v4
        with:
          name: windows-artifacts
          path: deceptgold/dist
      - name: Fetch tags [verified]
        run: git fetch --tags
      - name: Get latest semver tag [verified]
        id: get_latest_tag
        run: |
          latest=$(git tag --list 'v*' --sort=-v:refname | head -n 1)
          echo "LATEST_TAG=$latest" >> $GITHUB_ENV
      - name: Bump patch version [verified]
        id: bump_version
        run: |
          latest="${{ env.LATEST_TAG }}"
          if [[ "$latest" == "" ]]; then
            echo "NEW_TAG=v0.1.0" >> $GITHUB_ENV
          else
            IFS='.' read -r major minor patch <<< "${latest#v}"
            patch=$((patch + 1))
            echo "NEW_TAG=v${major}.${minor}.${patch}" >> $GITHUB_ENV
          fi
      - name: Generate custom release notes [verified]
        id: generate_notes
        run: |
          if [[ -z "${{ env.LATEST_TAG }}" ]]; then
            NOTES=$(git log --pretty="- %s" HEAD)
          else
            NOTES=$(git log --pretty="- %s" ${{ env.LATEST_TAG }}..HEAD)
          fi
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "## List of tag modifications: ${{ env.NEW_TAG }}" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Create new tag [verified]
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create GitHub Release and Upload Artifacts [verified]
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ env.NEW_TAG }}
          tag_name: ${{ env.NEW_TAG }}
          body: ${{ env.RELEASE_NOTES }}
          files: |
            deceptgold/dist/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}