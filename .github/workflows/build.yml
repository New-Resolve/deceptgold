name: Build and Release Deceptgold

on:
  push:
    branches:
      - master

jobs:
  build-linux:
    name: 🐧 Build for Linux
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y patchelf tree
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install project dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry install
        working-directory: deceptgold

      - name: Obfuscate source for Linux
        working-directory: deceptgold
        run: |
          rm -rf src_obf/ src/deceptgold.dist-info
          mkdir -p src_obf
          poetry run pyarmor gen -O src_obf -r -i src/deceptgold --platform linux.x86_64

      - name: Build and package for Ubuntu
        working-directory: deceptgold
        run: |
          poetry run briefcase build --target ubuntu --update
          poetry run briefcase package --target ubuntu

      - name: Build and package for Fedora
        working-directory: deceptgold
        run: |
          poetry run briefcase build --target fedora --update
          poetry run briefcase package --target fedora:40

      - name: Build and package for Debian
        working-directory: deceptgold
        run: |
          poetry run briefcase build --target debian --update
          poetry run briefcase package --target debian

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: deceptgold/dist/*

  build-windows:
    name: 🪟 Build for Windows
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
          $poetryPath = "$env:APPDATA\Python\Scripts"
          echo "$poetryPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
        shell: pwsh

      - name: Install project dependencies
        working-directory: deceptgold
        run: |
          poetry config virtualenvs.in-project true
          poetry install
        shell: pwsh

      - name: Obfuscate source for Windows
        working-directory: deceptgold
        run: |
          Remove-Item -Recurse -Force src_obf, src\deceptgold.dist-info -ErrorAction SilentlyContinue
          mkdir src_obf
          poetry run pyarmor gen -O src_obf -r -i src/deceptgold --platform windows.x86_64
        shell: pwsh

      - name: Build and package for Windows
        working-directory: deceptgold
        run: |
          poetry run briefcase build windows --update
          poetry run briefcase package windows
        shell: pwsh

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: deceptgold/dist/*

  build-macos:
    name: 🍏 Build for macOS
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install project dependencies
        run: |
          cd deceptgold
          poetry config virtualenvs.in-project true
          poetry install

      - name: Check if Xcode Command Line Tools are installed
        run: |
          if ! xcode-select -p &>/dev/null; then
            echo "Xcode Command Line Tools are not installed. Installing now..."
            xcode-select --install
          else
            echo "Xcode Command Line Tools are already installed."
          fi

      - name: Install pyarmor
        run: |
          cd deceptgold
          poetry run pip install --no-cache-dir pyarmor

      - name: Obfuscate source for macOS
        working-directory: deceptgold
        run: |
          rm -rf src_obf/ src/deceptgold.dist-info
          mkdir -p src_obf
          poetry run pyarmor gen -O src_obf -r -i src/deceptgold
        shell: bash

      - name: Update Briefcase
        run: |
          cd deceptgold
          poetry run pip install --upgrade briefcase

      - name: Build and package for macOS
        working-directory: deceptgold
        run: |
          poetry run briefcase build macOS --test
          poetry run briefcase package macOS --adhoc-sign
          if [ ! -f dist/deceptgold-*.pkg ]; then
            echo "Erro: Pacote .pkg não encontrado em dist/"
            exit 1
          fi

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: deceptgold/dist/*

  release:
    name: 🚀 Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-artifacts
          path: deceptgold/dist

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-artifacts
          path: deceptgold/dist

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-artifacts
          path: deceptgold/dist

      - name: Verify downloaded artifacts
        run: |
          ls -alh deceptgold/dist
          ls -alh deceptgold/build/macos || echo "macOS build directory not available"

      - name: Fetch tags
        run: git fetch --tags

      - name: Get latest semver tag
        id: get_latest_tag
        run: |
          latest=$(git tag --list 'v*' --sort=-v:refname | head -n 1)
          echo "LATEST_TAG=$latest" >> $GITHUB_ENV

      - name: Bump patch version
        id: bump_version
        run: |
          latest="${{ env.LATEST_TAG }}"
          if [[ "$latest" == "" ]]; then
            echo "NEW_TAG=v0.1.0" >> $GITHUB_ENV
          else
            IFS='.' read -r major minor patch <<< "${latest#v}"
            patch=$((patch + 1))
            echo "NEW_TAG=v${major}.${minor}.${patch}" >> $GITHUB_ENV
          fi

      - name: 📦 Create Release and Tag [verified]
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ env.NEW_TAG }}
          tag_name: ${{ env.NEW_TAG }}
          files: |
            deceptgold/dist/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}