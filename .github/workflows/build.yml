name: Build and Release Deceptgold

on:
  push:
    branches:
      - master

jobs:
  run-tests:
    name: ✅ Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch all history and tags
        run: |
          git fetch --prune --tags origin +refs/heads/master:refs/remotes/origin/master
          git checkout master
          git pull origin master || echo "No updates to pull"
          echo "Current branch: $(git branch --show-current)"
          echo "Commit at HEAD: $(git log -1 --oneline)"
          echo "Repository status:"
          git status

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        working-directory: deceptgold
        run: |
          poetry config virtualenvs.in-project true
          poetry install

      - name: Run tests
        working-directory: deceptgold
        run: |
          poetry run pytest -vvv

      - name: Install git-cliff
        run: |
          curl -L https://github.com/orhun/git-cliff/releases/download/v2.8.0/git-cliff-2.8.0-x86_64-unknown-linux-musl.tar.gz -o git-cliff-2.8.0-x86_64-unknown-linux-musl.tar.gz
          tar -xzf git-cliff-2.8.0-x86_64-unknown-linux-musl.tar.gz
          sudo mv git-cliff-2.8.0/git-cliff /usr/local/bin/
          git-cliff --version

      - name: Debug git-cliff configuration and commits
        run: |
          echo "Current directory: $(pwd)"
          ls -la deceptgold/utils/config/
          cat deceptgold/utils/config/cliff.toml || echo "cliff.toml not found"
          echo "Recent commits:"
          git log --oneline -n 10
          echo "Total commits in history:"
          git rev-list --count HEAD
          echo "Available tags:"
          git tag --list
          echo "Checking for initial tag..."
          if [ -z "$(git tag --list 'v*')" ]; then
            echo "No tags found. Creating initial tag v0.0.0."
            git tag v0.0.0 $(git rev-list --max-parents=0 HEAD)  # Tag no commit inicial
            git push origin v0.0.0
          else
            echo "Tags found: $(git tag --list 'v*')"
          fi

      - name: Generate CHANGELOG
        working-directory: deceptgold
        run: |
          poetry run generate-changelog
          cat src/deceptgold/CHANGELOG  # Mostra o conteúdo do CHANGELOG gerado para depuração

      - name: Commit and push CHANGELOG
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add deceptgold/src/deceptgold/CHANGELOG
          git commit -m "Changelog generation automation [skip ci]" || echo "No changes to commit"
          git push origin master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    name: 🐧 Build for Linux
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y patchelf tree
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install project dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry install
        working-directory: deceptgold

      - name: Obfuscate source for Linux
        working-directory: deceptgold
        run: |
          rm -rf src_obf/ src/deceptgold.dist-info
          mkdir -p src_obf
          poetry run pyarmor gen -O src_obf -r -i src/deceptgold --platform linux.x86_64

      - name: Build and package for Ubuntu
        working-directory: deceptgold
        run: |
          poetry run briefcase build --target ubuntu --update
          poetry run briefcase package --target ubuntu

      - name: Build and package for Fedora
        working-directory: deceptgold
        run: |
          poetry run briefcase build --target fedora --update
          poetry run briefcase package --target fedora:40

      - name: Build and package for Debian
        working-directory: deceptgold
        run: |
          poetry run briefcase build --target debian --update
          poetry run briefcase package --target debian

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: deceptgold/dist/*

  build-windows:
    name: 🪟 Build for Windows
    runs-on: windows-latest
    needs: run-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
          $poetryPath = "$env:APPDATA\Python\Scripts"
          echo "$poetryPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
        shell: pwsh

      - name: Install project dependencies
        working-directory: deceptgold
        run: |
          poetry config virtualenvs.in-project true
          poetry install
        shell: pwsh

      - name: Obfuscate source for Windows
        working-directory: deceptgold
        run: |
          Remove-Item -Recurse -Force src_obf, src\deceptgold.dist-info -ErrorAction SilentlyContinue
          mkdir src_obf
          poetry run pyarmor gen -O src_obf -r -i src/deceptgold --platform windows.x86_64
        shell: pwsh

      - name: Build and package for Windows
        working-directory: deceptgold
        run: |
          poetry run briefcase build windows --update
          poetry run briefcase package windows
        shell: pwsh

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: deceptgold/dist/*

  build-macos:
    name: 🍏 Build for macOS
    runs-on: macos-latest
    needs: run-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install project dependencies
        run: |
          cd deceptgold
          poetry config virtualenvs.in-project true
          poetry install

      - name: Check if Xcode Command Line Tools are installed
        run: |
          if ! xcode-select -p &>/dev/null; then
            echo "Xcode Command Line Tools are not installed. Installing now..."
            xcode-select --install
          else
            echo "Xcode Command Line Tools are already installed."
          fi

      - name: Install pyarmor
        run: |
          cd deceptgold
          poetry run pip install --no-cache-dir pyarmor

      - name: Obfuscate source for macOS
        working-directory: deceptgold
        run: |
          rm -rf src_obf/ src/deceptgold.dist-info
          mkdir -p src_obf
          poetry run pyarmor gen -O src_obf -r -i src/deceptgold
        shell: bash

      - name: Update Briefcase
        run: |
          cd deceptgold
          poetry run pip install --upgrade briefcase

      - name: Build and package for macOS
        working-directory: deceptgold
        run: |
          poetry run briefcase build macOS --test
          poetry run briefcase package macOS --adhoc-sign
          if [ ! -f dist/deceptgold-*.pkg ]; then
            echo "Erro: Pacote .pkg não encontrado em dist/"
            exit 1
          fi

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: deceptgold/dist/*

  scan-virustotal:
    name: 🔍 VirusTotal Scan
    runs-on: ubuntu-latest
    needs: [ build-linux, build-windows, build-macos ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: deceptgold/dist

      - name: VirusTotal Scan
        run: bash deceptgold/utils/check_virustotal.sh
        env:
          VIRUSTOTAL_API_KEY: ${{ secrets.VIRUSTOTAL_API_KEY }}

  release:
    name: 🚀 Release
    runs-on: ubuntu-latest
    needs: [ build-linux, build-windows, build-macos, scan-virustotal]

    steps:
      - name: Checkout repository [verified]
        uses: actions/checkout@v3

      - name: Download macOS artifacts [verified]
        uses: actions/download-artifact@v4
        with:
          name: macos-artifacts
          path: deceptgold/dist

      - name: Download Linux artifacts [verified]
        uses: actions/download-artifact@v4
        with:
          name: linux-artifacts
          path: deceptgold/dist

      - name: Download Windows artifacts [verified]
        uses: actions/download-artifact@v4
        with:
          name: windows-artifacts
          path: deceptgold/dist

      - name: Fetch tags [verified]
        run: git fetch --tags

      - name: Get latest semver tag [verified]
        id: get_latest_tag
        run: |
          latest=$(git tag --list 'v*' --sort=-v:refname | head -n 1)
          echo "LATEST_TAG=$latest" >> $GITHUB_ENV

      - name: Bump patch version [verified]
        id: bump_version
        run: |
          latest="${{ env.LATEST_TAG }}"
          if [[ "$latest" == "" ]]; then
            echo "NEW_TAG=v0.1.0" >> $GITHUB_ENV
          else
            IFS='.' read -r major minor patch <<< "${latest#v}"
            patch=$((patch + 1))
            echo "NEW_TAG=v${major}.${minor}.${patch}" >> $GITHUB_ENV
          fi

      - name: Generate custom release notes [verified]
        id: generate_notes
        run: |
          if [[ -z "${{ env.LATEST_TAG }}" ]]; then
            NOTES=$(git log --pretty="- %s" HEAD)
          else
            NOTES=$(git log --pretty="- %s" ${{ env.LATEST_TAG }}..HEAD)
          fi
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "## List of tag modifications: ${{ env.NEW_TAG }}" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create new tag [verified]
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release and Upload Artifacts [verified]
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ env.NEW_TAG }}
          tag_name: ${{ env.NEW_TAG }}
          body: ${{ env.RELEASE_NOTES }}
          files: |
            deceptgold/dist/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}